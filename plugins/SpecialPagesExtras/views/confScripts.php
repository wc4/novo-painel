<script>
$(document).ready(function() {

    //generated by php
    var fieldsData = <?php echo json_encode($fieldsData) ?>;
    
    //generated by php
    var pageData =  <?php echo json_encode($pageData) ?>;
   
    var $specialpagesForm =  $('#specialpagesForm');
        $tabFields = $('#tab-fields'),
        $editFields = $('#editfields'),
        $pageOptions = $('#spe_page-options'),
        $fieldDialog = $('#spe_field-dialog'),
        $dialogs = $fieldDialog;
        
        
    var newTypes  = [
        { 
            name  : 'multitext',
            old   : 'textfull',
            label     : '<?php i18n('SpecialPagesExtras/MULTITEXT'); ?>'
        },      
		{ 
            name  : 'multiselect',
            old   : 'text',
            label     : '<?php i18n('SpecialPagesExtras/MULTISELECT'); ?>'
        },  
		{ 
            name  : 'imagewiththumb',
            old   : 'textfull',
            label : '<?php i18n('SpecialPagesExtras/IMAGEWITHTHUMB'); ?>'
        },
		{ 
            name  : 'multiimage',
            old   : 'textfull',
            label : '<?php i18n('SpecialPagesExtras/MULTIIMAGE'); ?>'
        }	
    ];
        
    //parameters for field types
    var params = {
                    def : ['required', 'description', 'new-type', 'cell-width', 'cell-width-unit'], //default for all fields
                    text : ['regex'],
                    textfull : ['regex'],
                    textarea : ['regex'],
                    multitext : ['regex'],
                    multiselect : ['regex'],
					//apsect ratio has two fields displayed in one row the same with widtha nd its comparator
                    multiimage : ['aspect-ratio-width', 'aspect-ratio-height', 'width-comparator', 'width', 'height-comparator', 'height'],
                    imagewiththumb : ['aspect-ratio-width', 'aspect-ratio-height', 'width-comparator', 'width', 'height-comparator', 'height'] 
                };
       
    //add new types
    for (var prop in newTypes) {
        var type = newTypes[prop];
        $editFields.find('tbody tr select[name$="_type"]').append('<option data-spe-type="'+type.name+'" value="'+type.old+'" >'+type.label+'</option>');
    }
        
    $specialpagesForm.find('td[colspan="5"]').attr('colspan', $editFields.find('tbody tr:first td').length - 1); //fix sp buggy colspan
    
    $('#tab-fields').append($pageOptions); //add page options 
  
    //add buttons and hidden fields with field params on startup
    $editFields.find('td.delete').each(function(index){
        var $td = $(this);
            $tr = $td.closest('tr'),
            name = $tr.find('input[name$="_name"]').val().toLowerCase(),
            type = $tr.find('select[name$="_type"]').val();

        var allParams = getParamsForType(fieldsData && fieldsData[name] && fieldsData[name]['new-type'] ? fieldsData[name]['new-type'] : type);
        $td.append(generateHiddenInputs(allParams));
        
        //add button to open dialog
        $td.prepend('<button type="button" class="spe_field_button" title="<?php i18n('SpecialPagesExtras/FIELD_EXTRAS'); ?>" ><img src="../plugins/SpecialPagesExtras/img/configure.png"/> </button>');
    });
    
    fillPageOptions(pageData);                
    fillFieldsInputs(fieldsData);
    
    //----------------------------------------- HANDLERS and functions ------------------------
     
    //update hidden inputs on field type change
    $editFields.on('change', 'tbody tr select[name$="_type"]', function(event){
        var $select = $(this),
            $tr = $select.closest('tr'),
            $td = $tr.find('td.delete'),
            type = $select.val(),
            newType = $select.find('option:selected').data('speType'), //special new type
            $hiddenInputs = $td.find('input[type="hidden"]'),
            typeParams = getParamsForType(newType ? newType : type, true);
        
        //remove not default params hidden inputs
        $hiddenInputs.each(function(){
            var $hInput = $(this),
                name = $hInput.attr('name'),
                param = name.substr(name.lastIndexOf('-x-') + 3);
                
            //if is default one
            if (params.def.indexOf(param) != -1)
                return; //continue
                
            $hInput.remove();
        });
        
        //add type specific params
        $td.append(generateHiddenInputs(typeParams));
        
        //update if its special new type
        $td.find('input[type="hidden"][name$="-new-type"]').val(newType); 
		
		if (newType == 'multiselect'){ //show textaera with options
			$select.siblings('textarea').show().val(''); //reset value too
		}
    });
     
    //opens extra field dialog
    $editFields.on('click', 'tbody tr .spe_field_button', function(event){
        event.preventDefault();
		$fieldDialog.find('.valueok').focus();
        
        var $button = $(this),
            $tr = $button.closest('tr'),
            $dialog = $fieldDialog,
            $form = $dialog.find('form'),
			type = $tr.find('select[name$="_type"] option:selected').data('speType') || $tr.find('select[name$="_type"]').val(); //new or typical
			
	
        resetForm($form);
        prepareForm(params[type], $form, type);
        
        //store edited field index
        $dialog.data( 'spe-edited-index', $tr.index() );

        //add to header field name
        $dialog.find('h3 span').text( $tr.find('input[name$="_name"]').val() );
                           
        $dialog.dialog();
        $dialog.css('position', 'fixed'); //fix
        
        //open before filing, visible filter
        
        //fill field dialog inputs from hidden inputs
        $fieldDialog.find('tr input,tr textarea,tr select').filter(':visible').each(function(){
            var $input = $(this),
                name = $input.attr('name'),
                param = name.substr(name.indexOf('-') + 1),
                val = $button.siblings('input[type="hidden"][name="spe_field-x-'+ param +'"]').val();
            
            // alert(param + ' ' + val);
            if ( $input.is('[type="checkbox"]') && val ){
                $input.attr('checked', true);
            }    
            else if ( $input.is('textarea') && val ){
                $input.val( val.replace(/<br\/>/g, "\n") ); 
            }
            else{
                $input.val( val ); 
            }
        });
        
    });
    
                    
    
    //dialog ok
    $dialogs.find('form').submit(function(event){
        event.preventDefault();
                  
        var $dialog = $(this).parents('.dialog');
        
        //fill hidden fields from dialog inputs only visible = (for edited type)
        $fieldDialog.find('tr input,tr textarea,tr select').filter(':visible').each(function(){
            var $input = $(this),
                name = $input.attr('name').toLowerCase(),
                param = 'spe_field-x-' + name.substr(name.indexOf('-') + 1), //get param name from form input
                $hInput = $editFields.find('tbody tr:eq('+ $fieldDialog.data('spe-edited-index') +') td.delete') //find hidden input
                    .find('input[type="hidden"][name="'+ param +'"]');
            
            if ( $input.is('[type="checkbox"]')){
                $hInput.val($input.attr('checked'));
            }      
            else if ( $input.is('textarea')){
               $hInput.val( $input.val().replace(/\n/g, '<br/>') ); 
            }
            else{
                $hInput.val( $input.val() ); 
            }
        });
        
        $dialog.dialog('close');
    }); 
    
    //dialog cancel
    $dialogs.find('.valuecancel').click(function(event){
        event.preventDefault();
        var $dialog = $(this).parents('.dialog');
        $dialog.dialog('close');
    });
    
     //create  numbers for hidden inputs before submit
    $specialpagesForm.submit(function(){    
  
        //number special fields
        $editFields.find('td.delete input[name^="spe_field-x"]').each(function(index){
            var $input = $(this),
                rowIdx = $input.closest('tr').index();
        
            $input.attr('name', $input.attr('name').replace('-x-', '-'+rowIdx+'-')); 
        });
    });
    
    
    function resetForm ($form){
        $form.find('table').find('textarea,input,select').val('').removeAttr('checked');//reset values
        $form.find('[data-param],[data-for-type]').hide(); //hide all fields non standard and special labels
    };
    
    //prepares by showing fields for passed params array
    function prepareForm(params, $form, type){
		if (!params)
			return;
			
		for (var i = 0; i < params.length; i++) {
			$form.find('[data-param="'+params[i]+'"]').show();
		}
		
		$form.find('[data-for-type~="'+type+'"]').show(); //show special labels etcs
    };
    
    //return array of params for type, with defaults or only for type
    function getParamsForType (type, withoutDefaults){
        var p = withoutDefaults ? [] : params.def.slice(0); //clone

        if (typeof(params[type]) !== 'undefined'){
            return p.concat(params[type]);
        }
        else{
            return p;
        }
    };
    
    //generates hidden inputs for specified params
    function generateHiddenInputs(params){
        var s = '';        
        for (var i = 0; i < params.length; i++){ 
            s += '<input name="spe_field-x-'+ params[i] +'" type="hidden" />'
        }
        return s;
    }
    
    function fillPageOptions(pageData){
        if (!pageData)
            return;
        
        $.each( pageData, function( key, value ) {
            var $input = $pageOptions.find('input[name$="'+ key +'"]');
            
            if ($input.length){

                if ($input.is('[type="checkbox"]') && value){
                    $input.attr('checked', true);
                }
                else{
                    $input.val(value);
                }
            }
        });

    }         

    
    function fillFieldsInputs(fieldsData){
        if (!fieldsData)
            return;
    
        $.each( fieldsData, function( index, field ) {
			var $nameInput = $editFields.find('tbody tr td input[name$="_name"]').filter(function() {
					return $(this).val().toLowerCase() == field.name; //find name of input
				});
                                           
            if (!$nameInput.length) //not found field
                return;
                
            var $deleteTd = $nameInput.closest('td').siblings('td.delete'),
                $select = $nameInput.closest('tr').find('select[name$="_type"]');
                
            //fill all field hidden inputs
            $deleteTd.find('input[type="hidden"]').each(function(){
                var $input = $(this),
                    name = $input.attr('name').toLowerCase(),
                    paramName = name.substr(name.lastIndexOf('-x-') + 3);
                    
                if (typeof(field[paramName]) !== 'undefined'){
                    $input.val(field[paramName]); //set hidden field value
                    
					//if its new type, select option 
                    if (paramName == 'new-type' && field[paramName]){
						if (field[paramName] == 'multiselect'){ //is multiselect, show textarea with options
							$select.siblings('textarea')
								.show()
								.val(field['options'] ? field['options'].replace(/\|\|/g, "\n") : '');
						}
					
                        $select.val('').find('option[data-spe-type="'+ field[paramName] +'"]').attr('selected', 'selected');
                    }
                    
                }
            });
        });
    }

}); 
</script>